#!/opt/slurm-tools/bin/python3
""" Delete openstack instances """

import sys, os, subprocess, logging, logging.handlers
import openstack
import pprint

# configure logging to syslog - by default only "info" and above categories appear
logger = logging.getLogger("syslogger")
logger.setLevel(logging.DEBUG)
handler = logging.handlers.SysLogHandler("/dev/log")
handler.setFormatter(logging.Formatter(sys.argv[0] + ': %(message)s'))
logger.addHandler(handler)

def get_statesavelocation():
    """ Return the path for Slurm's StateSaveLocation """
    scontrol = subprocess.run(['scontrol', 'show', 'config'], stdout=subprocess.PIPE, universal_newlines=True)
    for line in scontrol.stdout.splitlines():
        if line.startswith('StateSaveLocation'): # StateSaveLocation       = /var/spool/slurm
            return line.split()[-1]

def expand_nodes(hostlist_expr):
    scontrol = subprocess.run(['scontrol', 'show', 'hostnames', hostlist_expr], stdout=subprocess.PIPE, universal_newlines=True)
    return scontrol.stdout.strip().split('\n')

def delete_server(conn, name):
    server = conn.compute.find_server(name)
    conn.compute.delete_server(server)

def suspend():
    hostlist_expr = sys.argv[1]
    logger.info(f"Slurmctld invoked suspend {hostlist_expr}")
    remove_nodes = expand_nodes(hostlist_expr)

    conn = openstack.connection.from_config()
    logger.info(f"Got openstack connection {conn}")

    for node in remove_nodes:
        instance_id = False
        statedir = get_statesavelocation()
        instance_file = os.path.join(statedir, node)
        try:
            with open(instance_file) as f:
                instance_id = f.readline().strip()
        except FileNotFoundError:
            logger.info(f"no instance file found in {statedir} for node {node}")

        logger.info(f"deleting node {instance_id or node}")
        delete_server(conn, (instance_id or node))

def main():
    try:
        suspend()
    except:
        logger.exception('Exception in main:')
        raise
